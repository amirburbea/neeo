<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Remote.Neeo</name>
    </assembly>
    <members>
        <member name="T:Remote.Neeo.Brain">
            <summary>
            Returns information about and contains methods for interacting with the NEEO Brain.
            </summary>
        </member>
        <member name="M:Remote.Neeo.Brain.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch data via a GET request to a REST endpoint on the Brain at the specified API <paramref name="path"/>.
            </summary>
            <param name="path">The API path on the NEEO Brain.</param>
            <param name="cancellationToken">A cancellation token for the request.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> representing the aschronous operation.</returns>
        </member>
        <member name="M:Remote.Neeo.Brain.PostAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch data via a POST request to a REST endpoint on the Brain at the specified API <paramref name="path"/>.
            </summary>
            <param name="path">The API path on the NEEO Brain.</param>
            <param name="body">An object to serialize into JSON to be used as the body of the request.</param>
            <param name="cancellationToken">A cancellation token for the request.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> representing the aschronous operation.</returns>
        </member>
        <member name="M:Remote.Neeo.Brain.#ctor(System.Net.IPAddress,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Remote.Neeo.Brain"/> class with details for reaching the NEEO brain on the network.
            </summary>
            <param name="ipAddress">The IP Address of the NEEO Brain on the network.</param>
            <param name="port">The port on which the NEEO Brain API is running.</param>
            <param name="name">The name assigned to the NEEO Brain by the end user.</param>
            <param name="hostName">The host name of the NEEO Brain.</param>
            <param name="version">The firmware version of the NEEO Brain.</param>
            <param name="region">The region set in the NEEO Brain firmware.<para/>Example: &quot;US&quot;.</param>
        </member>
        <member name="P:Remote.Neeo.Brain.HostName">
            <summary>
            The host name of the NEEO Brain.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Brain.IPAddress">
            <summary>
            The IP Address of the NEEO Brain on the network.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Brain.Name">
            <summary>
            The name assigned to the NEEO Brain by the end user.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Brain.Port">
            <summary>
            The port on which the NEEO Brain API is running.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Brain.Region">
            <summary>
            The region set in the NEEO Brain firmware.<para/>Example: &quot;US&quot;.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Brain.Version">
            <summary>
            The firmware version of the NEEO Brain.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Brain.IsFirmwareVersionSufficient">
            <summary>
            Gets a value indicating if the Brain firmware version is sufficient for running the SDK.
            </summary>
        </member>
        <member name="M:Remote.Neeo.Brain.OpenWebUI">
            <summary>
            Opens the default browser to the Brain WebUI.
            </summary>
        </member>
        <member name="M:Remote.Neeo.Brain.StartServerAsync(System.String,Remote.Neeo.Devices.IDeviceBuilder[],System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="devices"></param>
            <param name="hostIPAddress"></param>
            <param name="port"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Neeo.Brain.DiscoverAsync(System.Func{Remote.Neeo.Brain,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Discovers the first <see cref="T:Remote.Neeo.Brain"/> on the network matching the specified <paramref name="predicate"/> if provided.
            If no <paramref name="predicate"/> is provided, returns the first <see cref="T:Remote.Neeo.Brain"/> discovered.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> of the discovered <see cref="T:Remote.Neeo.Brain"/>.</returns>
        </member>
        <member name="M:Remote.Neeo.Brain.DiscoverAllAsync(System.Threading.CancellationToken)">
            <summary>
            Discovers all <see cref="T:Remote.Neeo.Brain"/>s on the network.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> of the discovered <see cref="T:Remote.Neeo.Brain"/>s.</returns>
        </member>
        <member name="T:Remote.Neeo.Devices.ButtonHandler">
            <summary>
            A (potentially) asynchronous method which is invoked in response to buttons being pressed on the NEEO remote
            in order to allow the driver to respond accordingly.
            <para />
            </summary>
            <param name="deviceId">The id associated with the device.</param>
            <param name="button">
            The name of the button being pressed. 
            <para/>
            Note that <see cref="M:Remote.Neeo.Devices.KnownButton.TryGetKnownButton(System.String)"/> may be able to translate this into a <see cref="T:Remote.Neeo.Devices.KnownButtons"/> enumerated value.
            </param>
            <returns><see cref="T:System.Threading.Tasks.Task"/> to indicate completion.</returns>
        </member>
        <member name="M:Remote.Neeo.Devices.Device.Create(System.String,Remote.Neeo.Devices.DeviceType,System.String)">
            <summary>
            Gets a fluent <see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for defining a NEEO device driver.
            </summary>
            <param name="name">The name of the device.</param>
            <param name="type">The type of device.</param>
            <param name="prefix">An optional prefix to attach to the internal name (defaults to the computer host name).</param>
            <returns><see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for defining the NEEO device driver.</returns>
        </member>
        <member name="T:Remote.Neeo.Devices.IDeviceBuilder">
            <summary>
            Fluent interface for building device.
            </summary>
        </member>
        <member name="M:Remote.Neeo.Devices.IDeviceBuilder.AddButton(Remote.Neeo.Devices.Descriptors.ButtonDescriptor)">
            <summary>
            Add a button to the device.
            <para />
            Note that adding buttons to the device requires defining a button handler via <see cref="M:Remote.Neeo.Devices.IDeviceBuilder.SetButtonHandler(Remote.Neeo.Devices.ButtonHandler)"/>.
            </summary>
            <param name="button">The button to add.</param>
            <returns><see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Remote.Neeo.Devices.IDeviceBuilder.AddButtonGroup(Remote.Neeo.Devices.ButtonGroup)">
            <summary>
            Add a group of buttons to the device.
            <para />
            Note that adding buttons to the device requires defining a button handler via <see cref="M:Remote.Neeo.Devices.IDeviceBuilder.SetButtonHandler(Remote.Neeo.Devices.ButtonHandler)"/>.
            </summary>
            <param name="group">The <see cref="T:Remote.Neeo.Devices.ButtonGroup"/> to add.</param>
            <returns><see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Remote.Neeo.Devices.IDeviceBuilder.AddButtons(Remote.Neeo.Devices.KnownButtons)">
            <summary>
            Add a button (or bitwise combination of buttons) to the device.
            <para />
            Note that adding buttons to the device requires defining a button handler via <see cref="M:Remote.Neeo.Devices.IDeviceBuilder.SetButtonHandler(Remote.Neeo.Devices.ButtonHandler)"/>.
            </summary>
            <param name="buttons">The button (or bitwise combination of buttons) to add.</param>
            <returns><see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Remote.Neeo.Devices.IDeviceBuilder.DefineTiming(Remote.Neeo.Devices.DeviceTiming)">
            <summary>
            Set timing related information (the delays NEEO should use when interacting with a device),
            which will be used when generating recipes.
            </summary>
            <param name="timing"><see cref="T:Remote.Neeo.Devices.DeviceTiming"/> specifying delays NEEO should use when interacting with a device.</param>
            <returns><see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Remote.Neeo.Devices.IDeviceBuilder.SetDriverVersion(System.UInt32)">
            <summary>
            Setting the version allows you to tell the Brain about changes to your devices components. If you for example add new buttons to a device,
            you can increase the version and this will let the Brain know to fetch the new components.
            You do not need to update the version if you do not change the components. When adding a version to a device that was previously not versioned,
            start with 1. The Brain will assume it was previously 0 and update.
            <para />
            Note: The Brain will only add new components, updating or removing old components is not supported)
            </summary>
            <returns><see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for chaining.</returns>
        </member>
        <member name="M:Remote.Neeo.Devices.IDeviceBuilder.SetSpecificName(System.String)">
            <summary>
            Sets an optional name to use when adding the device to a room (a name based on the type will be used by default, for example: 'Accessory').
            <para />
            Note: This does not apply to devices using discovery.
            </summary>
            <returns><see cref="T:Remote.Neeo.Devices.IDeviceBuilder"/> for chaining.</returns>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceCapability.AddAnotherDevice">
            <summary>
            This capability is used after you add a new device that uses discovery. It gives the option to select &quot;Add another {name}.&quot;.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceCapability.AlwaysOn">
            <summary>
            This capability is used when the device does not need to be powered on to be useable.
            <para />
            You don't need to specify 'POWER ON' and 'POWER OFF' buttons and the device is not identified as "stupid".
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceCapability.BridgeDevice">
            <summary>
            This capability is used after you add a hub/gateway device. It gives the option to select &quot;Add more from this bridge&quot;.
            <para />
            Example: Philips Hue - the discovered device (gateway) supports multiple devices (lamps).
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceCapability.DynamicDevice">
            <summary>
            If <see cref="P:Remote.Neeo.Devices.Discovery.DiscoveryOptions.EnableDynamicDeviceBuilder"/> is enabled, dynamically defined devices should set this capability.
            </summary>
        </member>
        <member name="T:Remote.Neeo.Devices.DeviceIcon">
            <summary>
            Device icons.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceIcon.Neeo">
            <summary>
            Neeo.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceIcon.Sonos">
            <summary>
            Sonos.
            </summary>
        </member>
        <member name="T:Remote.Neeo.Devices.DeviceInitializer">
            <summary>
            A (potentially) asynchronous method to invoke in order to initialize the NEEO device driver.
            <para />
            For example: Setting up a REST endpoint for the actual device(s) to interact with.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/> to indicate completion.</returns>
        </member>
        <member name="T:Remote.Neeo.Devices.DeviceTiming">
            <summary>
            A structure for specifying the delays NEEO should use when interacting with a device.
            </summary>
        </member>
        <member name="M:Remote.Neeo.Devices.DeviceTiming.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initialize a new <see cref="T:Remote.Neeo.Devices.DeviceTiming"/> instance.
            </summary>
            <param name="powerOnDelay">
            Optional: The number of milliseconds NEEO should wait after powering on the device
            before sending it another command.
            </param>
            <param name="sourceSwitchDelay">
            Optional: The number of milliseconds NEEO should wait after switching input on the device
            before sending it another command.
            </param>
            <param name="shutdownDelay">
            Optional: The number of milliseconds NEEO should wait after shutting down the device
            before sending it another command.
            </param>
        </member>
        <member name="P:Remote.Neeo.Devices.DeviceTiming.PowerOnDelay">
            <summary>
            Specifies the number of milliseconds NEEO should wait after powering on the device
            before sending it another command.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Devices.DeviceTiming.ShutdownDelay">
            <summary>
            Specifies the number of milliseconds NEEO should wait after shutting down the device
            before sending it another command.
            </summary>
        </member>
        <member name="P:Remote.Neeo.Devices.DeviceTiming.SourceSwitchDelay">
            <summary>
            Specifies the number of milliseconds NEEO should wait after switching input on the device
            before sending it another command.
            </summary>
        </member>
        <member name="T:Remote.Neeo.Devices.DeviceType">
            <summary>
            Device Types.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.Accessory">
            <summary>
            Accessory device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.Audio">
            <summary>
            Audio device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.AVReceiver">
            <summary>
            A/V Receiver or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.DVDisc">
            <summary>
            DVD, Blu-Ray, or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.GameConsole">
            <summary>
            Game Console or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.Light">
            <summary>
            Light or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.MediaPlayer">
            <summary>
            Media Player or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.MusicPlayer">
            <summary>
            Music Player or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.Projector">
            <summary>
            Projector or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.TV">
            <summary>
            TV or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.VideoOnDemand">
            <summary>
            Video-On-Demand box such as FireTV or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.HdmiSwitch">
            <summary>
            HDMI Switcher or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.SetTopBox">
            <summary>
            Cable/Satellite Box or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.SoundBar">
            <summary>
            Soundbar or similar device.
            </summary>
        </member>
        <member name="F:Remote.Neeo.Devices.DeviceType.Tuner">
            <summary>
            Radio Tuner or similar device.
            </summary>
        </member>
        <member name="T:Remote.Neeo.Devices.KnownButton">
            <summary>
            A set of <see langword="static"/> utilities for interacting with the <see cref="T:Remote.Neeo.Devices.KnownButtons"/> enumeration.
            </summary>
        </member>
        <member name="P:Remote.Neeo.TokenSearch`1.Threshold">
            <summary>
            At what point does the match algorithm give up. A threshold of 0 requires a perfect match
            (of both letters and location), a threshold of 1 would match anything.
            </summary>
        </member>
        <member name="P:Remote.Neeo.TokenSearch`1.Unique">
            <summary>
            Should the result just contain unique results.
            </summary>
        </member>
    </members>
</doc>
